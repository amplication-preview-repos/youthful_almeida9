/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Assignment } from "./Assignment";
import { AssignmentCountArgs } from "./AssignmentCountArgs";
import { AssignmentFindManyArgs } from "./AssignmentFindManyArgs";
import { AssignmentFindUniqueArgs } from "./AssignmentFindUniqueArgs";
import { CreateAssignmentArgs } from "./CreateAssignmentArgs";
import { UpdateAssignmentArgs } from "./UpdateAssignmentArgs";
import { DeleteAssignmentArgs } from "./DeleteAssignmentArgs";
import { AgentFindManyArgs } from "../../agent/base/AgentFindManyArgs";
import { Agent } from "../../agent/base/Agent";
import { Property } from "../../property/base/Property";
import { AssignmentService } from "../assignment.service";
@graphql.Resolver(() => Assignment)
export class AssignmentResolverBase {
  constructor(protected readonly service: AssignmentService) {}

  async _assignmentsMeta(
    @graphql.Args() args: AssignmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Assignment])
  async assignments(
    @graphql.Args() args: AssignmentFindManyArgs
  ): Promise<Assignment[]> {
    return this.service.assignments(args);
  }

  @graphql.Query(() => Assignment, { nullable: true })
  async assignment(
    @graphql.Args() args: AssignmentFindUniqueArgs
  ): Promise<Assignment | null> {
    const result = await this.service.assignment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Assignment)
  async createAssignment(
    @graphql.Args() args: CreateAssignmentArgs
  ): Promise<Assignment> {
    return await this.service.createAssignment({
      ...args,
      data: {
        ...args.data,

        agent: args.data.agent
          ? {
              connect: args.data.agent,
            }
          : undefined,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Assignment)
  async updateAssignment(
    @graphql.Args() args: UpdateAssignmentArgs
  ): Promise<Assignment | null> {
    try {
      return await this.service.updateAssignment({
        ...args,
        data: {
          ...args.data,

          agent: args.data.agent
            ? {
                connect: args.data.agent,
              }
            : undefined,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Assignment)
  async deleteAssignment(
    @graphql.Args() args: DeleteAssignmentArgs
  ): Promise<Assignment | null> {
    try {
      return await this.service.deleteAssignment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Agent], { name: "agents" })
  async findAgents(
    @graphql.Parent() parent: Assignment,
    @graphql.Args() args: AgentFindManyArgs
  ): Promise<Agent[]> {
    const results = await this.service.findAgents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Agent, {
    nullable: true,
    name: "agent",
  })
  async getAgent(@graphql.Parent() parent: Assignment): Promise<Agent | null> {
    const result = await this.service.getAgent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "property",
  })
  async getProperty(
    @graphql.Parent() parent: Assignment
  ): Promise<Property | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
